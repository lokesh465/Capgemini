pluginManagement {
    repositories {
        maven {
            url 'https://mycompany.artifactory.com/artifactory/libs-release'
            credentials {
                username = artifactory_user
                password = artifactory_password
            }
        }
        gradlePluginPortal()
    }

    resolutionStrategy {
        eachPlugin {
            if (requested.id.namespace == "org.springframework.boot") {
                useModule("org.springframework.boot:spring-boot-gradle-plugin:3.1.1")
            }
            if (requested.id.id == "io.spring.dependency-management") {
                useModule("io.spring.dependency-management:1.0.11.RELEASE")
            }
            if (requested.id.id == "org.openapi.generator") {
                useModule("org.openapitools:openapi-generator-gradle-plugin:6.6.0")
            }
            if (requested.id.id == "org.sonarqube") {
                useModule("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:4.4.1.3373")
            }
            if (requested.id.id == "net.foragerr.jmeter") {
                useModule("net.forager.jmeter:jmeter-gradle-plugin:1.1.0-4.0")
            }
        }
    }
}



plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.openapi.generator' version '6.6.0'
    id 'jacoco'
    id 'net.foragerr.jmeter' version '1.1.0-4.0'
    id 'org.sonarqube' version '4.4.1.3373'
}

group = 'com.mycompany.mofs'
version = '0.1'
description = 'starterkit'
java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

bootJar {
    archiveFileName.set('epMyProjectFramework.jar')
}

configurations.all {
    exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    exclude group: "org.hamcrest", module: "hamcrest-core"
    exclude group: "io.netty", module: "netty-transport-native-epoll"
}

repositories {
    mavenLocal()
    maven {
        url = 'https://mycompany.artifactory.com/artifactory/libs-release'
        credentials {
            username = project.findProperty('artifactory_user') ?: 'defaultUser'
            password = project.findProperty('artifactory_password') ?: 'defaultPassword'
        }
    }
    maven {
        url = 'https://mycompany.artifactory.com/artifactory/libs-release'
        credentials {
            username = project.findProperty('artifactory_user') ?: 'defaultUser'
            password = project.findProperty('artifactory_password') ?: 'defaultPassword'
        }
        metadataSources {
            artifact()
        }
    }
}

ext {
    pactVersion = "4.6.1"
    jacocoExclude = ['some/package/to/exclude/**']
}

dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-log4j2:3.1.1'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'

    // OpenAPI and Swagger
    implementation 'org.springdoc:springdoc-openapi-ui:1.7.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    implementation 'io.swagger.core.v3:swagger-annotations-jakarta:2.2.20'
    implementation 'org.json:json:20240205'

    // OpenTelemetry
    implementation 'io.opentelemetry:opentelemetry-api:1.25.0'
    implementation 'io.opentelemetry:opentelemetry-sdk:1.25.0'
    implementation 'io.opentelemetry:opentelemetry-exporter-otlp'
    implementation 'io.opentelemetry:opentelemetry-exporter-jaeger'
    implementation 'io.opentelemetry:opentelemetry-semconv:1.25.0-alpha'

    // Elastic APM
    implementation 'co.elastic.apm:apm-agent-attach:1.52.0'
    implementation 'co.elastic.apm:apm-opentracing:1.52.0'
    implementation 'co.elastic.apm:apm-agent-api:1.52.0'
    implementation 'javax.ws.rs:javax.ws.rs-api:2.1'

    // AWS and Hadoop
    implementation 'org.apache.hadoop:hadoop-aws:3.3.6'
    implementation 'org.apache.hadoop:hadoop-client:3.3.6'
    implementation 'com.amazonaws:aws-java-sdk-bundle:1.12.367'

    // Delta Lake and Spark
    implementation 'org.apache.spark:spark-core_2.13:3.4.0'
    implementation 'org.apache.spark:spark-sql_2.13:3.4.0'
    implementation 'io.delta:delta-core_2.13:2.4.0'
    implementation 'org.apache.parquet:parquet-avro:1.14.2'
    implementation 'org.apache.parquet:parquet-cli:1.14.2'

    // GlassFish Jersey Core
    implementation 'jakarta.servlet:jakarta.servlet-api:4.0.3'
    implementation 'org.glassfish.jersey.core:jersey-client:2.36'
    implementation 'org.glassfish.jersey.core:jersey-common:2.36'
    implementation 'org.glassfish.jersey.core:jersey-server:2.36'
    implementation 'org.glassfish.jersey.containers:jersey-container-servlet:2.36'
    implementation 'org.glassfish.jersey.containers:jersey-container-servlet-core:2.36'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "au.com.dius.pact.consumer:junit5:$pactVersion"
    testImplementation 'org.junit.platform:junit-platform-launcher:1.8.2'
    testImplementation "au.com.dius.pact.provider:junit5spring:$pactVersion"
}

tasks.test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    systemProperty 'pact.rootDir', "$buildDir/pacts"
    finalizedBy(tasks.jacocoTestReport)
}

jacoco {
    toolVersion = "0.8.10"
    reportsDirectory = file("$buildDir/test-results")
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExclude)
        }))
    }
    reports {
        html.required = true
        xml.required = true
        html.outputLocation.set(file("$buildDir/test-results/test/htmlReport"))
        xml.outputLocation.set(file("$buildDir/test-results/test/xmlReport"))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.6
            }
        }
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExclude)
        }))
    }
}

jmeter {
    jmTestFiles = [file("src/test/jmeter/epMyProjectFramework.jmx")]
    enableExtendedReports = true
}

check.dependsOn tasks.jacocoTestCoverageVerification

sonarqube {
    properties {
        property "sonar.sources", "src"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.language", "java"
        property "sonar.dynamicAnalysis", "reuseReports"
        property "sonar.utReportsFile", "${buildDir}/jacoco-ut.exec"
    }
}

if (hasProperty('generateSwaggerCode')) {
    apply from: "profile-swagger.gradle"
}
